1. Specifying The React Element Type:

The first part of the <tag> species the type of the react element:

ex :   <div className="Icon-wrapper"/>

div is the type of react element ,


Capitalized types indicate that the JSX tag is referring to a React component.   <Mycomponent/>


2. React Must Be in Scope


During conversion of JSX into pure js ,

jsx calls to React.CreateElement(); , so we need to import React .....



Note : Built-in component or HMTL tag in jsx




3. Using Dot Notation for JSX Type.


>>> In Jsx , we can reach to a component using the Dot Notation or we can refer to a component using dot notation .



Ex.....  import React from 'react';

const MyComponents = {
  DatePicker: function DatePicker(props) {
    return <div>Imagine a {props.color} datepicker here.</div>;
  }
}

function BlueDatePicker() {
  return <MyComponents.DatePicker color="blue" />;
}



4. User-Defined Components Must Be Capitalized


>>>>>  Lower Case Letters refers to built in React components or HTML Tags ex. <span> or <div>  

>>>>> UpperCase Letters are considered as user-Built react components.

----------------------------------or--------------------------------------------------

different methods of specifying an object 

link : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects

property accessors link : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors



5. Choosing the Type at Runtime








6.Props in Jsx 



   >>> ...Spread attributes       >>> meaning >> remaining things are assigned to that .


If you already have props as an object, and you want to pass it in JSX, you can use ... as a “spread” operator to pass the whole props object. These two components are equivalent:

function App1() {
  return <Greeting firstName="Ben" lastName="Hector" />;
}

function App2() {
  const props = {firstName: 'Ben', lastName: 'Hector'};
  return <Greeting {...props} />;
} 



ex.... 

const Button = props => {
  const { kind, ...other } = props;
  const className = kind === "primary" ? "PrimaryButton" : "SecondaryButton";
  return <button className={className} {...other} />;
};

const App = () => {
  return (
    <div>
      <Button kind="primary" onClick={() => console.log("clicked!")}>
        Hello World!
      </Button>
    </div>
  );
};


7. Childrens in jsx 


You can put a string between the opening and closing tags and props.children will just be that string. This is useful for many of the built-in HTML elements. For example:

<MyComponent>Hello world!</MyComponent>


This is valid JSX, and props.children in MyComponent will simply be the string "Hello world!". HTML is unescaped, so you can generally write JSX just like you would write HTML in this way:



8. A React component can also return an array of elements:

render() {
  // No need to wrap list items in an extra element!
  return [
    // Don't forget the keys :)
    <li key="A">First item</li>,
    <li key="B">Second item</li>,
    <li key="C">Third item</li>,
  ];
}


9. JavaScript Expressions as Children

This is often useful for rendering a list of JSX expressions of arbitrary length. For example, this renders an HTML list:


function Item(props) {
  return <li>{props.message}</li>;
}

function TodoList() {
  const todos = ['finish doc', 'submit pr', 'nag dan to review'];
  return (
    <ul>
      {todos.map((message) => <Item key={message} message={message} />)}
    </ul>
  );
}


10. Functions as Children

Normally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. However, props.children works just like any other prop in that it can pass any sort of data, not just the sorts that React knows how to render. For example, if you have a custom component, you could have it take a callback as props.children:

// Calls the children callback numTimes to produce a repeated component
function Repeat(props) {
  let items = [];
  for (let i = 0; i < props.numTimes; i++) {
    items.push(props.children(i));
  }
  return <div>{items}</div>;
}

function ListOfTenThings() {
  return (
    <Repeat numTimes={10}>
      {(index) => <div key={index}>This is item {index} in the list</div>}
    </Repeat>
  );
}
